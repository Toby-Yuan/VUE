1. setup

1.1 CDN(開發版本)
```
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
```

1.2 CDN(生產版本)
```
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
```


2. 基本教學

2.1 呼叫預設資料內容

html
```
<div id="app">
    {{ message }}
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        message: 'Hello Vue!'
    }
})
```

2.2 用VUE影響標籤屬性, 可以簡寫成 :title

html
```
<div id="app-2">
    <span v-bind:title="message">
        鼠标悬停几秒钟查看此处动态绑定的提示信息！
    </span>
</div>
```

js
```
var app2 = new Vue({
    el: '#app-2',
    data: {
        message: '页面加载于 ' + new Date().toLocaleString()
    }
})
```

2.3 條件式, 由seen(資料名稱)的布林值控制顯示

html
```
<div id="app-3">
    <p v-if="seen">现在你看到我了</p>
</div>
```

js
```
var app3 = new Vue({
    el: '#app-3',
    data: {
        seen: true // false
    }
})
```

2.4 迴圈

html
```
<div id="app-4">
    <ol>
        <li v-for="todo in todos">
            {{ todo.text }}
        </li>
    </ol>
</div>
```

js
```
var app4 = new Vue({
    el: '#app-4',
    data: {
        todos: [
            { text: '学习 JavaScript' },
            { text: '学习 Vue' },
            { text: '整个牛项目' }
        ]
    }
})
```

2.5 DOM事件處理, 可以簡寫成 @click

html
```
<div id="app-5">
    <p>{{ message }}</p>
    <button v-on:click="reverseMessage">反转消息</button>
</div>
```

js
```
var app5 = new Vue({
    el: '#app-5',
    data: {
        message: 'Hello Vue.js!'
    },
    methods: {
        reverseMessage: function () {
            this.message = this.message.split('').reverse().join('')
        }
    }
})
```

2.6 顯示端(html)影響資料顯示

html
```
<div id="app-6">
    <p>{{ message }}</p>
    <input v-model="message">
</div>
```

js
```
var app6 = new Vue({
    el: '#app-6',
    data: {
        message: 'Hello Vue!'
    }
})
```

2.7 組建化應用

2.7.1 定義新標籤(組建)-->todo-item

html
```
<ol>
    <todo-item></todo-item>
</ol>
```

js
```
Vue.component('todo-item', {
    template: '<li>这是个待办项</li>'
})

var app7 = new Vue(...)
```

2.7.2 定義新標籤的屬性-->todo

js
```
Vue.component('todo-item', {
    props: ['todo'],
    template: '<li>{{ todo.text }}</li>'
})
```


2.7.3 利用 v-bind 新增新屬性

html
```
<div id="app-7">
  <ol>
    <todo-item
      v-for="item in groceryList"
      v-bind:todo="item"
      v-bind:key="item.id"
    ></todo-item>
  </ol>
</div>
```

2.7.4 輸入需要循環顯示的資料

js
```
Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})

var app7 = new Vue({
    el: '#app-7',
    data: {
        groceryList: [
            { id: 0, text: '蔬菜' },
            { id: 1, text: '奶酪' },
            { id: 2, text: '随便其它什么人吃的东西' }
        ]
    }
})
```

2.7.5 結果會等於以下

html
```
<div id="app-7">
  <ul>
    <li v-for="todo in groceryList">
        {{ todo.text }}
    </li>
  </ul>
</div>
```

js
```
var app7 = new Vue({
    el: '#app-7',
    data: {
        groceryList: [
            { text: '蔬菜' },
            { text: '奶酪' },
            { text: '随便其它什么人吃的东西' }
        ]
    }
})
```


3. 生命週期(鉤子)

3.1 vue可以在每個步驟中進行動作, 例如: 監聽, 編譯

3.2 created: 在一個實例被創建後執行

js
```
var app = new Vue({
    el: '#app',
    data: {
        a: 'hello'
    },
    created: function(){
        console.log('a is:' + this.a)
    }
})
```

3.3 不可以用箭頭函示, 因為箭頭函式沒有this的概念

3.4 其他的例如: mounted(元素掛載, 有el), updated(DOM更新完成), destroyed(銷毀)

3.5 也可以在前面加上before, 字首大寫, 不用加ed


4. Vue語法
4.1 v-once: 有這個標籤屬性的不會被更改

html
```
<div id="app">
    <span>{{ a }}</span><br>
    <span v-once>{{ a }}</span>
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        a: 'hello'
    },
    created: function(){
        console.log('a is:' + this.a)
    }
})

app.a = 'change';
```

4.2 如果要透過Vue加入HTML的話, 必須要再需加入的地方加入標籤屬性 v-html

html
```
<div id="app1">
    <p>Using mustaches: {{ rawHtml }}</p>
    <p>Using v-html directive: <span v-html="rawHtml"></span></p>
</div>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        rawHtml: '<span style="color: red">This should be red</span>'
    }
})
```

4.3 html 中的 VUE 可以加入JS的單向運算

html
```
<div id="app2">
    <span>{{ a + 2 }}</span>
    <span>{{ ok ? "YES" : "NO" }}</span>
    <span>{{ message.split('').reverse().join('') }}</span>
    <div v-bind:id="'list' + id">id = list1</div>
</div>
```

js
```
var app2 = new Vue({
    el: '#app2',
    data: {
        a: 3,
        ok: true,
        message: 'It will be reverse',
        id: 1
    }
})
```

4.4 由VUE來控制html的顯示

html
```
<div id="app3">
    <p>如果v-if裡面的值是true就會看到<span v-if="seen">這句話</span></p>
</div>
```

js
```
var app3 = new Vue({
    el: '#app3',
    data: {
        seen: true
    }
})
```