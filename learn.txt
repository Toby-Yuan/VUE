1. setup

1.1 CDN(開發版本)
```
<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
```

1.2 CDN(生產版本)
```
<script src="https://cdn.jsdelivr.net/npm/vue"></script>
```


2. 基本教學

2.1 呼叫預設資料內容

html
```
<div id="app">
    {{ message }}
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        message: 'Hello Vue!'
    }
})
```

2.2 用VUE影響標籤屬性, 可以簡寫成 :title

html
```
<div id="app-2">
    <span v-bind:title="message">
        鼠标悬停几秒钟查看此处动态绑定的提示信息！
    </span>
</div>
```

js
```
var app2 = new Vue({
    el: '#app-2',
    data: {
        message: '页面加载于 ' + new Date().toLocaleString()
    }
})
```

2.3 條件式, 由seen(資料名稱)的布林值控制顯示

html
```
<div id="app-3">
    <p v-if="seen">现在你看到我了</p>
</div>
```

js
```
var app3 = new Vue({
    el: '#app-3',
    data: {
        seen: true // false
    }
})
```

2.4 迴圈

html
```
<div id="app-4">
    <ol>
        <li v-for="todo in todos">
            {{ todo.text }}
        </li>
    </ol>
</div>
```

js
```
var app4 = new Vue({
    el: '#app-4',
    data: {
        todos: [
            { text: '学习 JavaScript' },
            { text: '学习 Vue' },
            { text: '整个牛项目' }
        ]
    }
})
```

2.5 DOM事件處理, 可以簡寫成 @click

html
```
<div id="app-5">
    <p>{{ message }}</p>
    <button v-on:click="reverseMessage">反转消息</button>
</div>
```

js
```
var app5 = new Vue({
    el: '#app-5',
    data: {
        message: 'Hello Vue.js!'
    },
    methods: {
        reverseMessage: function () {
            this.message = this.message.split('').reverse().join('')
        }
    }
})
```

2.6 顯示端(html)影響資料顯示

html
```
<div id="app-6">
    <p>{{ message }}</p>
    <input v-model="message">
</div>
```

js
```
var app6 = new Vue({
    el: '#app-6',
    data: {
        message: 'Hello Vue!'
    }
})
```

2.7 組建化應用

2.7.1 定義新標籤(組建)-->todo-item

html
```
<ol>
    <todo-item></todo-item>
</ol>
```

js
```
Vue.component('todo-item', {
    template: '<li>这是个待办项</li>'
})

var app7 = new Vue(...)
```

2.7.2 定義新標籤的屬性-->todo

js
```
Vue.component('todo-item', {
    props: ['todo'],
    template: '<li>{{ todo.text }}</li>'
})
```


2.7.3 利用 v-bind 新增新屬性

html
```
<div id="app-7">
  <ol>
    <todo-item
      v-for="item in groceryList"
      v-bind:todo="item"
      v-bind:key="item.id"
    ></todo-item>
  </ol>
</div>
```

2.7.4 輸入需要循環顯示的資料

js
```
Vue.component('todo-item', {
  props: ['todo'],
  template: '<li>{{ todo.text }}</li>'
})

var app7 = new Vue({
    el: '#app-7',
    data: {
        groceryList: [
            { id: 0, text: '蔬菜' },
            { id: 1, text: '奶酪' },
            { id: 2, text: '随便其它什么人吃的东西' }
        ]
    }
})
```

2.7.5 結果會等於以下

html
```
<div id="app-7">
  <ul>
    <li v-for="todo in groceryList">
        {{ todo.text }}
    </li>
  </ul>
</div>
```

js
```
var app7 = new Vue({
    el: '#app-7',
    data: {
        groceryList: [
            { text: '蔬菜' },
            { text: '奶酪' },
            { text: '随便其它什么人吃的东西' }
        ]
    }
})
```


3. 生命週期(鉤子)

3.1 vue可以在每個步驟中進行動作, 例如: 監聽, 編譯

3.2 created: 在一個實例被創建後執行

js
```
var app = new Vue({
    el: '#app',
    data: {
        a: 'hello'
    },
    created: function(){
        console.log('a is:' + this.a)
    }
})
```

3.3 不可以用箭頭函示, 因為箭頭函式沒有this的概念

3.4 其他的例如: mounted(元素掛載, 有el), updated(DOM更新完成), destroyed(銷毀)

3.5 也可以在前面加上before, 字首大寫, 不用加ed


4. Vue語法
4.1 v-once: 有這個標籤屬性的不會被更改

html
```
<div id="app">
    <span>{{ a }}</span><br>
    <span v-once>{{ a }}</span>
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        a: 'hello'
    },
    created: function(){
        console.log('a is:' + this.a)
    }
})

app.a = 'change';
```

4.2 如果要透過Vue加入HTML的話, 必須要再需加入的地方加入標籤屬性 v-html

html
```
<div id="app1">
    <p>Using mustaches: {{ rawHtml }}</p>
    <p>Using v-html directive: <span v-html="rawHtml"></span></p>
</div>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        rawHtml: '<span style="color: red">This should be red</span>'
    }
})
```

4.3 html 中的 VUE 可以加入JS的單向運算

html
```
<div id="app2">
    <span>{{ a + 2 }}</span>
    <span>{{ ok ? "YES" : "NO" }}</span>
    <span>{{ message.split('').reverse().join('') }}</span>
    <div v-bind:id="'list' + id">id = list1</div>
</div>
```

js
```
var app2 = new Vue({
    el: '#app2',
    data: {
        a: 3,
        ok: true,
        message: 'It will be reverse',
        id: 1
    }
})
```

4.4 由VUE來控制html的顯示

html
```
<div id="app3">
    <p>如果v-if裡面的值是true就會看到<span v-if="seen">這句話</span></p>
</div>
```

js
```
var app3 = new Vue({
    el: '#app3',
    data: {
        seen: true
    }
})
```


5. 計算和偵聽器

5.1 Vue可以通過cpmputed 來設定要計算的函示並且return 顯示

html
```
<div id="app">
    <p>原本的句子 {{ message }}</p>
    <p>計算後句子 {{ reverseMessage }}</p>
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        message: 'Hello'
    },
    computed:{
        reverseMessage: function(){
            return this.message.split('').reverse().join('')
        }
    }
})
```

5.2 也可以用表達式(方法)來達到一樣的效果

html
```
<div id="app1">
    <p>原本的句子 {{ message }}</p>
    <p>表達式句子 {{ reverseMessage() }}</p>
</div>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        message: 'Hello'
    },
    methods: {
        reverseMessage: function(){
            return this.message.split('').reverse().join('')
        }
    }
})
```

5.3 計算和方法最大的差異在於: 計算式儲存於緩存, 所以不會再更動, 除非有響應式依賴發生變化

5.4 實際應用

html
```
<div id="app2">{{ fullName }}</div>
```

js
```
var app2 = new Vue({
    el: '#app2',
    data: {
        firstName: 'Foo',
        lastName: 'Bar'
    },
    computed: {
        fullName: function () {
            return this.firstName + ' ' + this.lastName
        }
    }
})
```

5.5 computed中每個計算方法都是預設為getter, 但是其實有另一個setter需要自行建立, setter可以設定該計算方法的設定

js
```
var app3 = new Vue({
    el: '#app3',
    data: {
        firstName: 'Foo',
        lastName: 'Bar'
    },
    computed: {
        fullName: {
            
            get: function(){
                return this.firstName + ' ' + this.lastName
            },

            set: function (newValue) {
                var names = newValue.split('')
                this.firstName = names[0]
                this.lastName = names[names.length - 1]
            }
        }
    }
})
```

5.6 watch可以觀察資料的變化

html
```
<div id="app4">
    <p>
        ask a yes/no question:
        <input v-model="question">
    </p>
    <p>{{ answer }}</p>
</div>
```

js
```
var app4 = new Vue({
    el: '#app4',
    data: {
        question: '',
        answer: 'Ask some question'
    },
    watch: {
        question: function (newQ, oldQ) {
            this.answer = 'Waiting...'
        }
    }
})
```

6. class&style

6.1 利用布林值控制是否添加class

html
```
<div id="app" v-bind:class="{ active: isActive }">this GREEN if isActive is true</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        isActive: true
    }
})
```

6.2 可以對class傳送一個陣列來增加多的類別

html
```
<div id="app1" v-bind:class="[active1, active2]">There are two class</div>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        active1: 'done',
        active2: 'box'
    }
})
```

6.3 可以設定style樣式再帶入

html
```
<div id="app2" :style="styleObject">TEXT</div>
```

js
```
var app2 = new Vue({
    el: '#app2',
    data: {
        styleObject: {
            color: 'red',
            fontSize: '13px'
        }
    }
})
```


7. 條件式

7.1 v-else可以顯示如果不通過要顯示的

html
```
<div id="app">
    <h1 v-if="awsome">True it</h1>
    <h1 v-else>False it</h1>
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        awsome: true
    }
})
```

7.2 也可以利用v-else-if來做更細部的篩選

html
```
<div id="app1">
    <div v-if="type === 'A'">A</div>
    <div v-else-if="type === 'B'">B</div>
    <div v-else-if="type === 'C'">C</div>
    <div v-else>NOT A,B,C</div>
</div>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        type: 'D'
    }
})
```

7.3 可以用key來獨立重複元素, 避免復用

7.4 與v-if相似的是v-show, 兩者差別在v-if只有在true才會運作(善用於不太會一直更改的地方), v-show則是會直接運作(善用於頻繁更改的地方)


8. 列表

8.1 v-for 可以做迴圈顯示

html
```
<ul id="app">
    <li v-for="item in items" :key="item.message">
        {{ item.message }}
    </li>
</ul>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        items: [
            {message: 'test1'},
            {message: 'test2'}
        ]
    }
})
```

8.2 v-for也有父子層關係

html
```
<ul id="app1">
    <li v-for="(item, index) in items">
        {{ parentMessage }} - {{ index }} - {{ item.message }}
    </li>
</ul>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        parentMessage: 'parent',
        items: [
            {message: 'test1'},
            {message: 'test2'}
        ]
    }
})
```

8.3 in 可以替換成 of

8.4 也可以對類別做迴圈

html
```
<ul id="app2">
    <li v-for="(value, name) in object">
        {{ name }} : {{ value }}
    </li>
</ul>
```

js
```
var app2 = new Vue({
    el: '#app2',
    data: {
        object: {
            title: 'How to do lists in Vue',
            author: 'Jane Done',
            public: '2020-08-10'
        }
    }
})
```

8.5 嘗試在工作管理區域打入 app.items.push({message: 'test3'})

8.6 函式篩選
html
```
<ul id="app3">
    <li v-for="n in evenNumbers">
        {{ n }}
    </li>
</ul>
```

js
```
var app3 = new Vue({
    el: '#app3',
    data: {
        numbers: [1, 2, 3, 4, 5, 6]
    },
    computed: {
        evenNumbers: function(){
            return this.numbers.filter(function (number){
                return number % 2 == 0;
            })
        }
    }
})
```

8.7 此方法與上面相同
html
```
<ul id="app4">
    <li v-for="set in sets" v-if="set % 2 == 0">
        {{ set }}  
    </li>
</ul>
```

js
```
var app4 = new Vue({
    el: '#app4',
    data: {
        sets: [1, 2, 3, 4, 5, 6, 7, 8]
    }
})
```

8.8 可以在html中使用template等待js啟用
html
```
<ul id="app5">
    <template v-for="set in sets">
        <li>{{ set }}</li>
    </template>
</ul>
```

js
```
var app5 = new Vue({
    el: '#app5',
    data: {
        sets: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    }
})
```


9. DOM事件, v-on
9.1 更改data
html
```
<div id="app">
    <button v-on:click="count+=1">Add 1</button>
    <p>The button click {{ count }} times</p>
</div>
```

js
```
var app = new Vue({
    el: '#app',
    data: {
        count: 0
    }
})
```

9.2 呼叫函式
html
```
<div id="app1">
    <button v-on:click="greet">Greet</button>
</div>
```

js
```
var app1 = new Vue({
    el: '#app1',
    data: {
        name: 'Tommy'
    },
    methods: {
        greet: function (){
            alert('Hello ' + this.name)
        }
    }
})
```

9.3 事件也有修飾

9.3.1 .once 事件只會處理一次
html
```
div id="app4">
    <button v-on:click.once="alert">Just Once</button>
</div>
```

js
```
var app4 = new Vue({
    el: '#app4',
    methods: {
        alert: function(){
            alert('Just this time')
        }
    }
})
```

9.3.2 .stop 防止事件冒泡
html
```
<div id="app5">
    <div @click="outer">
        <div @click="middle">
            <button @click.stop="inner">click me</button>
        </div>
    </div>
</div>
```

js
```
var app5 = new Vue({
    el: '#app5',
    methods: {
        outer: function(){
            alert('這是外面的div');
        },
        middle: function(){
            alert('這是中間的div');
        },
        inner: function(){
            alert('這是裡面的button');
        }
    }
})
```

9.3.3 .prevent 不會發生預設事件
html
```
<div id="app6">
    <a href="https://tw.yahoo.com/" @click.prevent="changeMsg">Click me</a>
    <p>{{ msg }}</p>
</div>
```

js
```
var app6 = new Vue({
    el: '#app6',
    data: {
        msg: 'Hi'
    },
    methods: {
        changeMsg: function(){
            this.msg = 'Cant go to yahoo';
        }
    }
})
```

9.3.4 .capture 冒泡捕捉, 類似反向冒泡, 許要每一層都加上
html
```
<div id="app7">
    <div @click.capture="outer">
        <div @click.capture="middle">
            <button @click.capture="inner">click me</button>
        </div>
    </div>
</div>
```

js
```
var app7 = new Vue({
    el: '#app7',
    methods: {
        outer: function(){
            alert('這是外面的div');
        },
        middle: function(){
            alert('這是中間的div');
        },
        inner: function(){
            alert('這是裡面的button');
        }
    }
})
```

9.3.5 .self 只會發生在自己的範圍, 不包含子元素